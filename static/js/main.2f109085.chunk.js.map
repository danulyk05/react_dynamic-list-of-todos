{"version":3,"sources":["types/Todo.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","service/todo.ts","index.tsx"],"names":["FilterBy","TodoList","todos","selectedTodo","onTodoClick","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","query","setQuery","onFilterChange","filterBy","value","onChange","event","target","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","TodoModal","isLoading","setSelectedTodoId","href","user","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","App","useState","setTodos","loading","setloading","errorMessage","setErrorMessage","selectedTodoId","setSelectedTodo","setFilterBy","useEffect","todoData","catch","finally","userId","openedTodo","find","userData","preparedTodos","copyTodos","normalizedQuery","toLowerCase","trim","filter","includes","filterTodos","isShowTodoList","length","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f109085.chunk.js","sourcesContent":["import { User } from './User';\n\nexport interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n  user: User | null;\n}\n\nexport enum FilterBy {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onTodoClick: (todoID: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onTodoClick,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {\n        todos.map(todo => (\n          <tr data-cy=\"todo\" key={todo.id}>\n            <td className=\"is-vcentered\">\n              {todo.id}\n            </td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onTodoClick(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames('far', {\n                      'fa-eye': !selectedTodo,\n                      'fa-eye-slash': selectedTodo?.id === todo.id,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))\n      }\n    </tbody>\n  </table>\n);\n","import { FilterBy } from '../../types/Todo';\n\ntype Props = {\n  query: string;\n  setQuery: (value: string) => void;\n  filterBy: FilterBy;\n  onFilterChange: (selectedOption: FilterBy) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  onFilterChange,\n  filterBy,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterBy}\n          onChange={(event) => onFilterChange(event.target.value as FilterBy)}\n        >\n          <option value={FilterBy.ALL}>All</option>\n          <option value={FilterBy.ACTIVE}>Active</option>\n          <option value={FilterBy.COMPLETED}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo | null;\n  isLoading: boolean;\n  setSelectedTodoId: (todoId: number) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  isLoading,\n  setSelectedTodoId,\n}) => {\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodoId(0)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${todo?.user?.email}`}>\n                {todo?.user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { FilterBy, Todo } from './types/Todo';\nimport { User } from './types/User';\nimport { getTodos, getUser } from './api';\nimport { filterTodos } from './service/todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setloading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filterBy, setFilterBy] = useState<FilterBy>(FilterBy.ALL);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    setloading(true);\n\n    getTodos()\n      .then((todoData: Todo[]) => {\n        setTodos(todoData);\n      })\n      .catch(() => setErrorMessage('Try again later'))\n      .finally(() => setloading(false));\n  }, []);\n\n  useEffect(() => {\n    if (!selectedTodoId) {\n      setSelectedTodo(null);\n\n      return;\n    }\n\n    const openedTodo = todos.find(todo => todo.id === selectedTodoId);\n\n    if (openedTodo?.userId) {\n      setloading(true);\n\n      getUser(openedTodo.userId)\n        .then((userData: User) => {\n          const user = userData as User;\n\n          setSelectedTodo({\n            ...openedTodo,\n            user: user || null,\n          });\n        })\n        .catch(() => setErrorMessage('Try again later'))\n        .finally(() => setloading(false));\n    }\n  }, [selectedTodoId]);\n\n  const preparedTodos = filterTodos(todos, filterBy, query);\n  const isShowTodoList = (!loading || (loading && selectedTodoId))\n    && (!errorMessage && todos.length > 0);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterBy={filterBy}\n                onFilterChange={setFilterBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && !selectedTodoId && <Loader />}\n\n              {isShowTodoList && (\n                <TodoList\n                  todos={preparedTodos}\n                  onTodoClick={(todoId) => setSelectedTodoId(todoId)}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n\n              {errorMessage && (\n                <p className=\"has-text-danger\">{errorMessage}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId && (\n        <TodoModal\n          todo={selectedTodo}\n          isLoading={loading}\n          setSelectedTodoId={(todoId) => setSelectedTodoId(todoId)}\n        />\n      )}\n    </>\n  );\n};\n","import { FilterBy, Todo } from '../types/Todo';\n\nexport function filterTodos(\n  todos: Todo[],\n  filterBy: FilterBy,\n  query: string,\n) {\n  let copyTodos = [...todos];\n  const normalizedQuery = query.toLowerCase().trim();\n\n  if (normalizedQuery) {\n    copyTodos = copyTodos.filter(todo => {\n      const normalizedTitle = todo.title.toLowerCase().trim();\n\n      return normalizedTitle.includes(normalizedQuery);\n    });\n  }\n\n  switch (filterBy) {\n    case FilterBy.ALL:\n      return copyTodos;\n\n    case FilterBy.COMPLETED:\n      return copyTodos.filter(todo => todo.completed);\n\n    case FilterBy.ACTIVE:\n      return copyTodos.filter(todo => !todo.completed);\n\n    default:\n      return copyTodos;\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}